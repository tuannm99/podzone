package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"

	"github.com/tuannm99/podzone/internal/backoffice/controller/graphql/generated"
	"github.com/tuannm99/podzone/internal/backoffice/controller/graphql/generated/model"
	"github.com/tuannm99/podzone/internal/backoffice/domain/entity"
	"github.com/tuannm99/podzone/pkg/toolkit"
)

// CreateStore is the resolver for the createStore field.
func (r *mutationResolver) CreateStore(ctx context.Context, input model.CreateStoreInput) (*model.Store, error) {
	store, err := r.StoreUsecase.CreateStore(input.Name, input.Description)
	if err != nil {
		return nil, err
	}

	resp, err := toolkit.MapStruct[entity.Store, model.Store](*store)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ActivateStore is the resolver for the activateStore field.
func (r *mutationResolver) ActivateStore(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.StoreUsecase.UpdateStoreStatus(id, true)
	if err != nil {
		return nil, err
	}
	resp, err := toolkit.MapStruct[entity.Store, model.Store](*store)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// DeactivateStore is the resolver for the deactivateStore field.
func (r *mutationResolver) DeactivateStore(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.StoreUsecase.UpdateStoreStatus(id, false)
	if err != nil {
		return nil, err
	}
	resp, err := toolkit.MapStruct[entity.Store, model.Store](*store)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// Stores is the resolver for the stores field.
func (r *queryResolver) Stores(ctx context.Context) ([]*model.Store, error) {
	stores, err := r.StoreUsecase.GetAllStores()
	if err != nil {
		return nil, err
	}

	results := make([]*model.Store, 0, len(stores))
	for _, s := range stores {
		resp, err := toolkit.MapStruct[entity.Store, model.Store](s)
		if err != nil {
			return nil, err
		}
		results = append(results, resp)
	}
	return results, nil
}

// Store is the resolver for the store field.
func (r *queryResolver) Store(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.StoreUsecase.GetStoreByID(id)
	if err != nil {
		return nil, err
	}

	resp, err := toolkit.MapStruct[entity.Store, model.Store](*store)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
