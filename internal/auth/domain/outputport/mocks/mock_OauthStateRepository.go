// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockOauthStateRepository is an autogenerated mock type for the OauthStateRepository type
type MockOauthStateRepository struct {
	mock.Mock
}

type MockOauthStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOauthStateRepository) EXPECT() *MockOauthStateRepository_Expecter {
	return &MockOauthStateRepository_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: key
func (_m *MockOauthStateRepository) Del(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOauthStateRepository_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockOauthStateRepository_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *MockOauthStateRepository_Expecter) Del(key interface{}) *MockOauthStateRepository_Del_Call {
	return &MockOauthStateRepository_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockOauthStateRepository_Del_Call) Run(run func(key string)) *MockOauthStateRepository_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOauthStateRepository_Del_Call) Return(_a0 error) *MockOauthStateRepository_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOauthStateRepository_Del_Call) RunAndReturn(run func(string) error) *MockOauthStateRepository_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockOauthStateRepository) Get(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOauthStateRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOauthStateRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockOauthStateRepository_Expecter) Get(key interface{}) *MockOauthStateRepository_Get_Call {
	return &MockOauthStateRepository_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockOauthStateRepository_Get_Call) Run(run func(key string)) *MockOauthStateRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOauthStateRepository_Get_Call) Return(_a0 string, _a1 error) *MockOauthStateRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOauthStateRepository_Get_Call) RunAndReturn(run func(string) (string, error)) *MockOauthStateRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, duration
func (_m *MockOauthStateRepository) Set(key string, duration time.Duration) error {
	ret := _m.Called(key, duration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(key, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOauthStateRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockOauthStateRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - duration time.Duration
func (_e *MockOauthStateRepository_Expecter) Set(key interface{}, duration interface{}) *MockOauthStateRepository_Set_Call {
	return &MockOauthStateRepository_Set_Call{Call: _e.mock.On("Set", key, duration)}
}

func (_c *MockOauthStateRepository_Set_Call) Run(run func(key string, duration time.Duration)) *MockOauthStateRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockOauthStateRepository_Set_Call) Return(_a0 error) *MockOauthStateRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOauthStateRepository_Set_Call) RunAndReturn(run func(string, time.Duration) error) *MockOauthStateRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOauthStateRepository creates a new instance of MockOauthStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOauthStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOauthStateRepository {
	mock := &MockOauthStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
