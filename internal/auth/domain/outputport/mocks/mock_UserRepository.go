// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/tuannm99/podzone/internal/auth/domain/entity"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: e
func (_m *MockUserRepository) Create(e entity.User) (*entity.User, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (*entity.User, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(entity.User) *entity.User); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - e entity.User
func (_e *MockUserRepository_Expecter) Create(e interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", e)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(e entity.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 *entity.User, _a1 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(entity.User) (*entity.User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateByEmailIfNotExisted provides a mock function with given fields: email
func (_m *MockUserRepository) CreateByEmailIfNotExisted(email string) (*entity.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for CreateByEmailIfNotExisted")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CreateByEmailIfNotExisted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateByEmailIfNotExisted'
type MockUserRepository_CreateByEmailIfNotExisted_Call struct {
	*mock.Call
}

// CreateByEmailIfNotExisted is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepository_Expecter) CreateByEmailIfNotExisted(email interface{}) *MockUserRepository_CreateByEmailIfNotExisted_Call {
	return &MockUserRepository_CreateByEmailIfNotExisted_Call{Call: _e.mock.On("CreateByEmailIfNotExisted", email)}
}

func (_c *MockUserRepository_CreateByEmailIfNotExisted_Call) Run(run func(email string)) *MockUserRepository_CreateByEmailIfNotExisted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_CreateByEmailIfNotExisted_Call) Return(_a0 *entity.User, _a1 error) *MockUserRepository_CreateByEmailIfNotExisted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CreateByEmailIfNotExisted_Call) RunAndReturn(run func(string) (*entity.User, error)) *MockUserRepository_CreateByEmailIfNotExisted_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockUserRepository) GetByID(id string) (*entity.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockUserRepository_Expecter) GetByID(id interface{}) *MockUserRepository_GetByID_Call {
	return &MockUserRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockUserRepository_GetByID_Call) Run(run func(id string)) *MockUserRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByID_Call) Return(_a0 *entity.User, _a1 error) *MockUserRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetByID_Call) RunAndReturn(run func(string) (*entity.User, error)) *MockUserRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsernameOrEmail provides a mock function with given fields: identity
func (_m *MockUserRepository) GetByUsernameOrEmail(identity string) (*entity.User, error) {
	ret := _m.Called(identity)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsernameOrEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(identity)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(identity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(identity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetByUsernameOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsernameOrEmail'
type MockUserRepository_GetByUsernameOrEmail_Call struct {
	*mock.Call
}

// GetByUsernameOrEmail is a helper method to define mock.On call
//   - identity string
func (_e *MockUserRepository_Expecter) GetByUsernameOrEmail(identity interface{}) *MockUserRepository_GetByUsernameOrEmail_Call {
	return &MockUserRepository_GetByUsernameOrEmail_Call{Call: _e.mock.On("GetByUsernameOrEmail", identity)}
}

func (_c *MockUserRepository_GetByUsernameOrEmail_Call) Run(run func(identity string)) *MockUserRepository_GetByUsernameOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByUsernameOrEmail_Call) Return(_a0 *entity.User, _a1 error) *MockUserRepository_GetByUsernameOrEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetByUsernameOrEmail_Call) RunAndReturn(run func(string) (*entity.User, error)) *MockUserRepository_GetByUsernameOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: e
func (_m *MockUserRepository) Update(e entity.User) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - e entity.User
func (_e *MockUserRepository_Expecter) Update(e interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", e)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(e entity.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(_a0 error) *MockUserRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(entity.User) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function with given fields: id, e
func (_m *MockUserRepository) UpdateById(id uint, e entity.User) error {
	ret := _m.Called(id, e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, entity.User) error); ok {
		r0 = rf(id, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type MockUserRepository_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - id uint
//   - e entity.User
func (_e *MockUserRepository_Expecter) UpdateById(id interface{}, e interface{}) *MockUserRepository_UpdateById_Call {
	return &MockUserRepository_UpdateById_Call{Call: _e.mock.On("UpdateById", id, e)}
}

func (_c *MockUserRepository_UpdateById_Call) Run(run func(id uint, e entity.User)) *MockUserRepository_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateById_Call) Return(_a0 error) *MockUserRepository_UpdateById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_UpdateById_Call) RunAndReturn(run func(uint, entity.User) error) *MockUserRepository_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
