// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"

	outputport "github.com/tuannm99/podzone/internal/auth/domain/outputport"
)

// MockGoogleOauthExternal is an autogenerated mock type for the GoogleOauthExternal type
type MockGoogleOauthExternal struct {
	mock.Mock
}

type MockGoogleOauthExternal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleOauthExternal) EXPECT() *MockGoogleOauthExternal_Expecter {
	return &MockGoogleOauthExternal_Expecter{mock: &_m.Mock}
}

// ExchangeCode provides a mock function with given fields: ctx, code
func (_m *MockGoogleOauthExternal) ExchangeCode(ctx context.Context, code string) (*oauth2.Token, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCode")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oauth2.Token, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauth2.Token); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoogleOauthExternal_ExchangeCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCode'
type MockGoogleOauthExternal_ExchangeCode_Call struct {
	*mock.Call
}

// ExchangeCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockGoogleOauthExternal_Expecter) ExchangeCode(ctx interface{}, code interface{}) *MockGoogleOauthExternal_ExchangeCode_Call {
	return &MockGoogleOauthExternal_ExchangeCode_Call{Call: _e.mock.On("ExchangeCode", ctx, code)}
}

func (_c *MockGoogleOauthExternal_ExchangeCode_Call) Run(run func(ctx context.Context, code string)) *MockGoogleOauthExternal_ExchangeCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGoogleOauthExternal_ExchangeCode_Call) Return(_a0 *oauth2.Token, _a1 error) *MockGoogleOauthExternal_ExchangeCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoogleOauthExternal_ExchangeCode_Call) RunAndReturn(run func(context.Context, string) (*oauth2.Token, error)) *MockGoogleOauthExternal_ExchangeCode_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUserInfo provides a mock function with given fields: accessToken
func (_m *MockGoogleOauthExternal) FetchUserInfo(accessToken string) (*outputport.GoogleUserInfo, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserInfo")
	}

	var r0 *outputport.GoogleUserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*outputport.GoogleUserInfo, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) *outputport.GoogleUserInfo); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*outputport.GoogleUserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoogleOauthExternal_FetchUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUserInfo'
type MockGoogleOauthExternal_FetchUserInfo_Call struct {
	*mock.Call
}

// FetchUserInfo is a helper method to define mock.On call
//   - accessToken string
func (_e *MockGoogleOauthExternal_Expecter) FetchUserInfo(accessToken interface{}) *MockGoogleOauthExternal_FetchUserInfo_Call {
	return &MockGoogleOauthExternal_FetchUserInfo_Call{Call: _e.mock.On("FetchUserInfo", accessToken)}
}

func (_c *MockGoogleOauthExternal_FetchUserInfo_Call) Run(run func(accessToken string)) *MockGoogleOauthExternal_FetchUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoogleOauthExternal_FetchUserInfo_Call) Return(_a0 *outputport.GoogleUserInfo, _a1 error) *MockGoogleOauthExternal_FetchUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoogleOauthExternal_FetchUserInfo_Call) RunAndReturn(run func(string) (*outputport.GoogleUserInfo, error)) *MockGoogleOauthExternal_FetchUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with no fields
func (_m *MockGoogleOauthExternal) GetConfig() *oauth2.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// MockGoogleOauthExternal_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockGoogleOauthExternal_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockGoogleOauthExternal_Expecter) GetConfig() *MockGoogleOauthExternal_GetConfig_Call {
	return &MockGoogleOauthExternal_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockGoogleOauthExternal_GetConfig_Call) Run(run func()) *MockGoogleOauthExternal_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGoogleOauthExternal_GetConfig_Call) Return(_a0 *oauth2.Config) *MockGoogleOauthExternal_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoogleOauthExternal_GetConfig_Call) RunAndReturn(run func() *oauth2.Config) *MockGoogleOauthExternal_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoogleOauthExternal creates a new instance of MockGoogleOauthExternal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleOauthExternal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleOauthExternal {
	mock := &MockGoogleOauthExternal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
