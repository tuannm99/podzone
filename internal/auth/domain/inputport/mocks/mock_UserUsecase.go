// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	entity "github.com/tuannm99/podzone/internal/auth/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUserUsecase is an autogenerated mock type for the UserUsecase type
type MockUserUsecase struct {
	mock.Mock
}

type MockUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUsecase) EXPECT() *MockUserUsecase_Expecter {
	return &MockUserUsecase_Expecter{mock: &_m.Mock}
}

// CreateNew provides a mock function with given fields: user
func (_m *MockUserUsecase) CreateNew(user entity.User) (*entity.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateNew")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (*entity.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entity.User) *entity.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUsecase_CreateNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNew'
type MockUserUsecase_CreateNew_Call struct {
	*mock.Call
}

// CreateNew is a helper method to define mock.On call
//   - user entity.User
func (_e *MockUserUsecase_Expecter) CreateNew(user interface{}) *MockUserUsecase_CreateNew_Call {
	return &MockUserUsecase_CreateNew_Call{Call: _e.mock.On("CreateNew", user)}
}

func (_c *MockUserUsecase_CreateNew_Call) Run(run func(user entity.User)) *MockUserUsecase_CreateNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserUsecase_CreateNew_Call) Return(_a0 *entity.User, _a1 error) *MockUserUsecase_CreateNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUsecase_CreateNew_Call) RunAndReturn(run func(entity.User) (*entity.User, error)) *MockUserUsecase_CreateNew_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewAfterAuthCallback provides a mock function with given fields: user
func (_m *MockUserUsecase) CreateNewAfterAuthCallback(user entity.User) (*entity.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewAfterAuthCallback")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (*entity.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entity.User) *entity.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUsecase_CreateNewAfterAuthCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewAfterAuthCallback'
type MockUserUsecase_CreateNewAfterAuthCallback_Call struct {
	*mock.Call
}

// CreateNewAfterAuthCallback is a helper method to define mock.On call
//   - user entity.User
func (_e *MockUserUsecase_Expecter) CreateNewAfterAuthCallback(user interface{}) *MockUserUsecase_CreateNewAfterAuthCallback_Call {
	return &MockUserUsecase_CreateNewAfterAuthCallback_Call{Call: _e.mock.On("CreateNewAfterAuthCallback", user)}
}

func (_c *MockUserUsecase_CreateNewAfterAuthCallback_Call) Run(run func(user entity.User)) *MockUserUsecase_CreateNewAfterAuthCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockUserUsecase_CreateNewAfterAuthCallback_Call) Return(_a0 *entity.User, _a1 error) *MockUserUsecase_CreateNewAfterAuthCallback_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUsecase_CreateNewAfterAuthCallback_Call) RunAndReturn(run func(entity.User) (*entity.User, error)) *MockUserUsecase_CreateNewAfterAuthCallback_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: id, user
func (_m *MockUserUsecase) UpdateOne(id uint, user entity.User) error {
	ret := _m.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, entity.User) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUsecase_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockUserUsecase_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - id uint
//   - user entity.User
func (_e *MockUserUsecase_Expecter) UpdateOne(id interface{}, user interface{}) *MockUserUsecase_UpdateOne_Call {
	return &MockUserUsecase_UpdateOne_Call{Call: _e.mock.On("UpdateOne", id, user)}
}

func (_c *MockUserUsecase_UpdateOne_Call) Run(run func(id uint, user entity.User)) *MockUserUsecase_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(entity.User))
	})
	return _c
}

func (_c *MockUserUsecase_UpdateOne_Call) Return(_a0 error) *MockUserUsecase_UpdateOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserUsecase_UpdateOne_Call) RunAndReturn(run func(uint, entity.User) error) *MockUserUsecase_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserUsecase creates a new instance of MockUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUsecase {
	mock := &MockUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
