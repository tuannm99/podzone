// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/tuannm99/podzone/internal/auth/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// GenerateOAuthURL provides a mock function with given fields: ctx
func (_m *MockAuthUsecase) GenerateOAuthURL(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOAuthURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_GenerateOAuthURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOAuthURL'
type MockAuthUsecase_GenerateOAuthURL_Call struct {
	*mock.Call
}

// GenerateOAuthURL is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthUsecase_Expecter) GenerateOAuthURL(ctx interface{}) *MockAuthUsecase_GenerateOAuthURL_Call {
	return &MockAuthUsecase_GenerateOAuthURL_Call{Call: _e.mock.On("GenerateOAuthURL", ctx)}
}

func (_c *MockAuthUsecase_GenerateOAuthURL_Call) Run(run func(ctx context.Context)) *MockAuthUsecase_GenerateOAuthURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthUsecase_GenerateOAuthURL_Call) Return(_a0 string, _a1 error) *MockAuthUsecase_GenerateOAuthURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_GenerateOAuthURL_Call) RunAndReturn(run func(context.Context) (string, error)) *MockAuthUsecase_GenerateOAuthURL_Call {
	_c.Call.Return(run)
	return _c
}

// HandleOAuthCallback provides a mock function with given fields: ctx, code, state
func (_m *MockAuthUsecase) HandleOAuthCallback(ctx context.Context, code string, state string) (*dto.GoogleCallbackResp, error) {
	ret := _m.Called(ctx, code, state)

	if len(ret) == 0 {
		panic("no return value specified for HandleOAuthCallback")
	}

	var r0 *dto.GoogleCallbackResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.GoogleCallbackResp, error)); ok {
		return rf(ctx, code, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.GoogleCallbackResp); ok {
		r0 = rf(ctx, code, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GoogleCallbackResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_HandleOAuthCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleOAuthCallback'
type MockAuthUsecase_HandleOAuthCallback_Call struct {
	*mock.Call
}

// HandleOAuthCallback is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - state string
func (_e *MockAuthUsecase_Expecter) HandleOAuthCallback(ctx interface{}, code interface{}, state interface{}) *MockAuthUsecase_HandleOAuthCallback_Call {
	return &MockAuthUsecase_HandleOAuthCallback_Call{Call: _e.mock.On("HandleOAuthCallback", ctx, code, state)}
}

func (_c *MockAuthUsecase_HandleOAuthCallback_Call) Run(run func(ctx context.Context, code string, state string)) *MockAuthUsecase_HandleOAuthCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_HandleOAuthCallback_Call) Return(_a0 *dto.GoogleCallbackResp, _a1 error) *MockAuthUsecase_HandleOAuthCallback_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_HandleOAuthCallback_Call) RunAndReturn(run func(context.Context, string, string) (*dto.GoogleCallbackResp, error)) *MockAuthUsecase_HandleOAuthCallback_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *MockAuthUsecase) Login(ctx context.Context, username string, password string) (*dto.LoginResp, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.LoginResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.LoginResp, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.LoginResp); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockAuthUsecase_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *MockAuthUsecase_Login_Call {
	return &MockAuthUsecase_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *MockAuthUsecase_Login_Call) Run(run func(ctx context.Context, username string, password string)) *MockAuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_Login_Call) Return(_a0 *dto.LoginResp, _a1 error) *MockAuthUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Login_Call) RunAndReturn(run func(context.Context, string, string) (*dto.LoginResp, error)) *MockAuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx
func (_m *MockAuthUsecase) Logout(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthUsecase_Expecter) Logout(ctx interface{}) *MockAuthUsecase_Logout_Call {
	return &MockAuthUsecase_Logout_Call{Call: _e.mock.On("Logout", ctx)}
}

func (_c *MockAuthUsecase_Logout_Call) Run(run func(ctx context.Context)) *MockAuthUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthUsecase_Logout_Call) Return(_a0 string, _a1 error) *MockAuthUsecase_Logout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Logout_Call) RunAndReturn(run func(context.Context) (string, error)) *MockAuthUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *MockAuthUsecase) Register(ctx context.Context, req dto.RegisterReq) (*dto.RegisterResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.RegisterResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterReq) (*dto.RegisterResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterReq) *dto.RegisterResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RegisterResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.RegisterReq
func (_e *MockAuthUsecase_Expecter) Register(ctx interface{}, req interface{}) *MockAuthUsecase_Register_Call {
	return &MockAuthUsecase_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockAuthUsecase_Register_Call) Run(run func(ctx context.Context, req dto.RegisterReq)) *MockAuthUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.RegisterReq))
	})
	return _c
}

func (_c *MockAuthUsecase_Register_Call) Return(_a0 *dto.RegisterResp, _a1 error) *MockAuthUsecase_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Register_Call) RunAndReturn(run func(context.Context, dto.RegisterReq) (*dto.RegisterResp, error)) *MockAuthUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
