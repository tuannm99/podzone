// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateStoreInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Store struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description *string     `json:"description,omitempty"`
	Status      StoreStatus `json:"status"`
	CreatedAt   time.Time   `json:"createdAt"`
	UpdatedAt   time.Time   `json:"updatedAt"`
}

type StoreStatus string

const (
	StoreStatusActive   StoreStatus = "ACTIVE"
	StoreStatusInactive StoreStatus = "INACTIVE"
	StoreStatusPending  StoreStatus = "PENDING"
)

var AllStoreStatus = []StoreStatus{
	StoreStatusActive,
	StoreStatusInactive,
	StoreStatusPending,
}

func (e StoreStatus) IsValid() bool {
	switch e {
	case StoreStatusActive, StoreStatusInactive, StoreStatusPending:
		return true
	}
	return false
}

func (e StoreStatus) String() string {
	return string(e)
}

func (e *StoreStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreStatus", str)
	}
	return nil
}

func (e StoreStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *StoreStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e StoreStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
