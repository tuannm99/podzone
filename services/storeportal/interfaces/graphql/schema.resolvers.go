package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/tuannm99/podzone/services/storeportal/interfaces/graphql/generated"
	"github.com/tuannm99/podzone/services/storeportal/interfaces/graphql/model"
)

// CreateStore is the resolver for the createStore field.
func (r *mutationResolver) CreateStore(ctx context.Context, input model.CreateStoreInput) (*model.Store, error) {
	description := ""
	if input.Description != nil {
		description = *input.Description
	}

	store, err := r.storeService.CreateStore(ctx, input.Name, description)
	if err != nil {
		return nil, err
	}
	return mapDomainStoreToGraphQL(store), nil
}

// ActivateStore is the resolver for the activateStore field.
func (r *mutationResolver) ActivateStore(ctx context.Context, id string) (*model.Store, error) {
	if err := r.storeService.ActivateStore(ctx, id); err != nil {
		return nil, err
	}
	return r.Query().Store(ctx, id)
}

// DeactivateStore is the resolver for the deactivateStore field.
func (r *mutationResolver) DeactivateStore(ctx context.Context, id string) (*model.Store, error) {
	if err := r.storeService.DeactivateStore(ctx, id); err != nil {
		return nil, err
	}
	return r.Query().Store(ctx, id)
}

// Store is the resolver for the store field.
func (r *queryResolver) Store(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.storeService.GetStore(ctx, id)
	if err != nil {
		return nil, err
	}
	return mapDomainStoreToGraphQL(store), nil
}

// Stores is the resolver for the stores field.
func (r *queryResolver) Stores(ctx context.Context) ([]*model.Store, error) {
	stores, err := r.storeService.ListStores(ctx)
	if err != nil {
		return nil, err
	}
	return mapDomainStoresToGraphQL(stores), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
