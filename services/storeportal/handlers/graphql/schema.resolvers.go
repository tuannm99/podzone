package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/tuannm99/podzone/services/storeportal/handlers/graphql/generated"
	"github.com/tuannm99/podzone/services/storeportal/handlers/graphql/model"
)

// CreateStore is the resolver for the createStore field.
func (r *mutationResolver) CreateStore(ctx context.Context, input model.CreateStoreInput) (*model.Store, error) {
	store, err := r.storeService.CreateStore(ctx, input.Name, input.Description)
	if err != nil {
		return nil, err
	}

	return &model.Store{
		ID:          store.ID.Hex(),
		Name:        store.Name,
		Description: store.Description,
		Status:      store.Status,
		CreatedAt:   store.CreatedAt,
		UpdatedAt:   store.UpdatedAt,
	}, nil
}

// ActivateStore is the resolver for the activateStore field.
func (r *mutationResolver) ActivateStore(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.storeService.ActivateStore(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.Store{
		ID:          store.ID.Hex(),
		Name:        store.Name,
		Description: store.Description,
		Status:      store.Status,
		CreatedAt:   store.CreatedAt,
		UpdatedAt:   store.UpdatedAt,
	}, nil
}

// DeactivateStore is the resolver for the deactivateStore field.
func (r *mutationResolver) DeactivateStore(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.storeService.DeactivateStore(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.Store{
		ID:          store.ID.Hex(),
		Name:        store.Name,
		Description: store.Description,
		Status:      store.Status,
		CreatedAt:   store.CreatedAt,
		UpdatedAt:   store.UpdatedAt,
	}, nil
}

// Store is the resolver for the store field.
func (r *queryResolver) Store(ctx context.Context, id string) (*model.Store, error) {
	store, err := r.storeService.GetStore(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.Store{
		ID:          store.ID.Hex(),
		Name:        store.Name,
		Description: store.Description,
		Status:      store.Status,
		CreatedAt:   store.CreatedAt,
		UpdatedAt:   store.UpdatedAt,
	}, nil
}

// Stores is the resolver for the stores field.
func (r *queryResolver) Stores(ctx context.Context) ([]*model.Store, error) {
	stores, err := r.storeService.ListStores(ctx)
	if err != nil {
		return nil, err
	}

	result := make([]*model.Store, len(stores))
	for i, store := range stores {
		result[i] = &model.Store{
			ID:          store.ID.Hex(),
			Name:        store.Name,
			Description: store.Description,
			Status:      store.Status,
			CreatedAt:   store.CreatedAt,
			UpdatedAt:   store.UpdatedAt,
		}
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
