syntax = "proto3";

package cart;

option go_package = "github.com/tuannm99/podzone/pkg/api/proto/cart";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/empty.proto";

// CartService handles shopping cart operations
service CartService {
  // GetCart retrieves the current user's cart
  rpc GetCart(GetCartRequest) returns (Cart) {
    option (google.api.http) = {
      get: "/api/v1/cart"
    };
  }

  // GetCartByID retrieves a cart by ID (mainly for guest-to-user conversion)
  rpc GetCartByID(GetCartByIDRequest) returns (Cart) {
    option (google.api.http) = {
      get: "/api/v1/cart/{id}"
    };
  }

  // AddItem adds a product to the cart
  rpc AddItem(AddItemRequest) returns (Cart) {
    option (google.api.http) = {
      post: "/api/v1/cart/items"
      body: "*"
    };
  }

  // UpdateItem updates a cart item's quantity
  rpc UpdateItem(UpdateItemRequest) returns (Cart) {
    option (google.api.http) = {
      put: "/api/v1/cart/items/{item_id}"
      body: "*"
    };
  }

  // RemoveItem removes an item from the cart
  rpc RemoveItem(RemoveItemRequest) returns (Cart) {
    option (google.api.http) = {
      delete: "/api/v1/cart/items/{item_id}"
    };
  }

  // ClearCart removes all items from the cart
  rpc ClearCart(ClearCartRequest) returns (Cart) {
    option (google.api.http) = {
      delete: "/api/v1/cart"
    };
  }

  // ApplyCoupon applies a coupon code to the cart
  rpc ApplyCoupon(ApplyCouponRequest) returns (Cart) {
    option (google.api.http) = {
      post: "/api/v1/cart/coupons"
      body: "*"
    };
  }

  // RemoveCoupon removes a coupon from the cart
  rpc RemoveCoupon(RemoveCouponRequest) returns (Cart) {
    option (google.api.http) = {
      delete: "/api/v1/cart/coupons/{code}"
    };
  }

  // MergeCart merges a guest cart with a user's cart
  rpc MergeCart(MergeCartRequest) returns (Cart) {
    option (google.api.http) = {
      post: "/api/v1/cart/merge"
      body: "*"
    };
  }

  // GetShippingOptions gets available shipping options for the cart
  rpc GetShippingOptions(GetShippingOptionsRequest) returns (GetShippingOptionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/cart/shipping-options"
    };
  }

  // SetShippingOption sets the selected shipping option for the cart
  rpc SetShippingOption(SetShippingOptionRequest) returns (Cart) {
    option (google.api.http) = {
      post: "/api/v1/cart/shipping-option"
      body: "*"
    };
  }

  // GetCartSummary gets a summary of the cart (for checkout)
  rpc GetCartSummary(GetCartSummaryRequest) returns (CartSummary) {
    option (google.api.http) = {
      get: "/api/v1/cart/summary"
    };
  }
}

// Cart represents a shopping cart
message Cart {
  string id = 1;
  string user_id = 2; // Optional for guest carts
  repeated CartItem items = 3;
  repeated AppliedCoupon coupons = 4;
  CartTotals totals = 5;
  ShippingOption selected_shipping = 6;
  string currency = 7;
  bool is_guest_cart = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp expires_at = 11; // For guest carts
}

// CartItem represents an item in the cart
message CartItem {
  string id = 1;
  string product_id = 2;
  string name = 3;
  string sku = 4;
  int32 quantity = 5;
  double unit_price = 6;
  double subtotal = 7; // unit_price * quantity
  double discount = 8; // Discount amount
  string image_url = 9;
  map<string, string> attributes = 10; // For variants
  bool in_stock = 11;
  string currency = 12;
}

// CartTotals represents the cart's totals
message CartTotals {
  double subtotal = 1; // Sum of (item.unit_price * item.quantity)
  double discount_total = 2; // Sum of all discounts
  double tax_total = 3;
  double shipping_total = 4;
  double grand_total = 5; // subtotal - discount_total + tax_total + shipping_total
  int32 items_count = 6; // Total number of items
  int32 items_quantity = 7; // Total quantity of all items
}

// AppliedCoupon represents a coupon applied to the cart
message AppliedCoupon {
  string code = 1;
  string type = 2; // percentage, fixed
  double value = 3;
  double discount_amount = 4; // Actual discount amount
  string description = 5;
}

// ShippingOption represents a shipping option
message ShippingOption {
  string id = 1;
  string name = 2;
  string carrier = 3;
  double price = 4;
  string currency = 5;
  string estimated_delivery = 6; // e.g., "2-3 business days"
  string description = 7;
}

// CartSummary provides a summary of the cart for checkout
message CartSummary {
  string cart_id = 1;
  repeated CartItem items = 2;
  CartTotals totals = 3;
  ShippingOption selected_shipping = 4;
  repeated AppliedCoupon coupons = 5;
  string currency = 6;
}

// GetCartRequest is used to retrieve the current user's cart
message GetCartRequest {
  bool create_if_not_exists = 1;
}

// GetCartByIDRequest is used to retrieve a cart by ID
message GetCartByIDRequest {
  string id = 1;
}

// AddItemRequest is used to add a product to the cart
message AddItemRequest {
  string cart_id = 1; // Optional, for guest carts
  string product_id = 2;
  int32 quantity = 3;
  map<string, string> attributes = 4; // For variants
}

// UpdateItemRequest is used to update a cart item's quantity
message UpdateItemRequest {
  string cart_id = 1; // Optional, for guest carts
  string item_id = 2;
  int32 quantity = 3;
}

// RemoveItemRequest is used to remove an item from the cart
message RemoveItemRequest {
  string cart_id = 1; // Optional, for guest carts
  string item_id = 2;
}

// ClearCartRequest is used to clear the cart
message ClearCartRequest {
  string cart_id = 1; // Optional, for guest carts
}

// ApplyCouponRequest is used to apply a coupon to the cart
message ApplyCouponRequest {
  string cart_id = 1; // Optional, for guest carts
  string code = 2;
}

// RemoveCouponRequest is used to remove a coupon from the cart
message RemoveCouponRequest {
  string cart_id = 1; // Optional, for guest carts
  string code = 2;
}

// MergeCartRequest is used to merge a guest cart with a user's cart
message MergeCartRequest {
  string guest_cart_id = 1;
  string user_cart_id = 2; // Optional, will use current user's cart if not provided
}

// GetShippingOptionsRequest is used to get shipping options
message GetShippingOptionsRequest {
  string cart_id = 1; // Optional, for guest carts
  string country = 2;
  string postal_code = 3;
}

// GetShippingOptionsResponse contains available shipping options
message GetShippingOptionsResponse {
  repeated ShippingOption options = 1;
}

// SetShippingOptionRequest is used to set the selected shipping option
message SetShippingOptionRequest {
  string cart_id = 1; // Optional, for guest carts
  string shipping_option_id = 2;
}

// GetCartSummaryRequest is used to get a cart summary
message GetCartSummaryRequest {
  string cart_id = 1; // Optional, for guest carts
}
