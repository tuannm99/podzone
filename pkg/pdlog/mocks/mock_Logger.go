// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	pdlog "github.com/tuannm99/podzone/pkg/pdlog"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, kv
func (_m *MockLogger) Debug(msg string, kv ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, kv...)
	_m.Called(_ca...)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - kv ...interface{}
func (_e *MockLogger_Expecter) Debug(msg interface{}, kv ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, kv...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(msg string, kv ...interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: msg, kv
func (_m *MockLogger) Error(msg string, kv ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, kv...)
	_m.Called(_ca...)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - kv ...interface{}
func (_e *MockLogger_Expecter) Error(msg interface{}, kv ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, kv...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(msg string, kv ...interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: msg, kv
func (_m *MockLogger) Info(msg string, kv ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, kv...)
	_m.Called(_ca...)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - kv ...interface{}
func (_e *MockLogger_Expecter) Info(msg interface{}, kv ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, kv...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string, kv ...interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Log provides a mock function with given fields: level, msg, kv
func (_m *MockLogger) Log(level pdlog.Level, msg string, kv ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, level, msg)
	_ca = append(_ca, kv...)
	_m.Called(_ca...)
}

// MockLogger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLogger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - level pdlog.Level
//   - msg string
//   - kv ...interface{}
func (_e *MockLogger_Expecter) Log(level interface{}, msg interface{}, kv ...interface{}) *MockLogger_Log_Call {
	return &MockLogger_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{level, msg}, kv...)...)}
}

func (_c *MockLogger_Log_Call) Run(run func(level pdlog.Level, msg string, kv ...interface{})) *MockLogger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(pdlog.Level), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Log_Call) Return() *MockLogger_Log_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Log_Call) RunAndReturn(run func(pdlog.Level, string, ...interface{})) *MockLogger_Log_Call {
	_c.Run(run)
	return _c
}

// Sync provides a mock function with no fields
func (_m *MockLogger) Sync() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogger_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockLogger_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Sync() *MockLogger_Sync_Call {
	return &MockLogger_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *MockLogger_Sync_Call) Run(run func()) *MockLogger_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Sync_Call) Return(_a0 error) *MockLogger_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Sync_Call) RunAndReturn(run func() error) *MockLogger_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, kv
func (_m *MockLogger) Warn(msg string, kv ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, kv...)
	_m.Called(_ca...)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - kv ...interface{}
func (_e *MockLogger_Expecter) Warn(msg interface{}, kv ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, kv...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(msg string, kv ...interface{})) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// With provides a mock function with given fields: kv
func (_m *MockLogger) With(kv ...interface{}) pdlog.Logger {
	var _ca []interface{}
	_ca = append(_ca, kv...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 pdlog.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) pdlog.Logger); ok {
		r0 = rf(kv...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pdlog.Logger)
		}
	}

	return r0
}

// MockLogger_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type MockLogger_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - kv ...interface{}
func (_e *MockLogger_Expecter) With(kv ...interface{}) *MockLogger_With_Call {
	return &MockLogger_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, kv...)...)}
}

func (_c *MockLogger_With_Call) Run(run func(kv ...interface{})) *MockLogger_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_With_Call) Return(_a0 pdlog.Logger) *MockLogger_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_With_Call) RunAndReturn(run func(...interface{}) pdlog.Logger) *MockLogger_With_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
