// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cart/cart.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_GetCart_FullMethodName            = "/cart.CartService/GetCart"
	CartService_GetCartByID_FullMethodName        = "/cart.CartService/GetCartByID"
	CartService_AddItem_FullMethodName            = "/cart.CartService/AddItem"
	CartService_UpdateItem_FullMethodName         = "/cart.CartService/UpdateItem"
	CartService_RemoveItem_FullMethodName         = "/cart.CartService/RemoveItem"
	CartService_ClearCart_FullMethodName          = "/cart.CartService/ClearCart"
	CartService_ApplyCoupon_FullMethodName        = "/cart.CartService/ApplyCoupon"
	CartService_RemoveCoupon_FullMethodName       = "/cart.CartService/RemoveCoupon"
	CartService_MergeCart_FullMethodName          = "/cart.CartService/MergeCart"
	CartService_GetShippingOptions_FullMethodName = "/cart.CartService/GetShippingOptions"
	CartService_SetShippingOption_FullMethodName  = "/cart.CartService/SetShippingOption"
	CartService_GetCartSummary_FullMethodName     = "/cart.CartService/GetCartSummary"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CartService handles shopping cart operations
type CartServiceClient interface {
	// GetCart retrieves the current user's cart
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*Cart, error)
	// GetCartByID retrieves a cart by ID (mainly for guest-to-user conversion)
	GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*Cart, error)
	// AddItem adds a product to the cart
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*Cart, error)
	// UpdateItem updates a cart item's quantity
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*Cart, error)
	// RemoveItem removes an item from the cart
	RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*Cart, error)
	// ClearCart removes all items from the cart
	ClearCart(ctx context.Context, in *ClearCartRequest, opts ...grpc.CallOption) (*Cart, error)
	// ApplyCoupon applies a coupon code to the cart
	ApplyCoupon(ctx context.Context, in *ApplyCouponRequest, opts ...grpc.CallOption) (*Cart, error)
	// RemoveCoupon removes a coupon from the cart
	RemoveCoupon(ctx context.Context, in *RemoveCouponRequest, opts ...grpc.CallOption) (*Cart, error)
	// MergeCart merges a guest cart with a user's cart
	MergeCart(ctx context.Context, in *MergeCartRequest, opts ...grpc.CallOption) (*Cart, error)
	// GetShippingOptions gets available shipping options for the cart
	GetShippingOptions(ctx context.Context, in *GetShippingOptionsRequest, opts ...grpc.CallOption) (*GetShippingOptionsResponse, error)
	// SetShippingOption sets the selected shipping option for the cart
	SetShippingOption(ctx context.Context, in *SetShippingOptionRequest, opts ...grpc.CallOption) (*Cart, error)
	// GetCartSummary gets a summary of the cart (for checkout)
	GetCartSummary(ctx context.Context, in *GetCartSummaryRequest, opts ...grpc.CallOption) (*CartSummary, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_GetCartByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ClearCart(ctx context.Context, in *ClearCartRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_ClearCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ApplyCoupon(ctx context.Context, in *ApplyCouponRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_ApplyCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveCoupon(ctx context.Context, in *RemoveCouponRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_RemoveCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) MergeCart(ctx context.Context, in *MergeCartRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_MergeCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetShippingOptions(ctx context.Context, in *GetShippingOptionsRequest, opts ...grpc.CallOption) (*GetShippingOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShippingOptionsResponse)
	err := c.cc.Invoke(ctx, CartService_GetShippingOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) SetShippingOption(ctx context.Context, in *SetShippingOptionRequest, opts ...grpc.CallOption) (*Cart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cart)
	err := c.cc.Invoke(ctx, CartService_SetShippingOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartSummary(ctx context.Context, in *GetCartSummaryRequest, opts ...grpc.CallOption) (*CartSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartSummary)
	err := c.cc.Invoke(ctx, CartService_GetCartSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility.
//
// CartService handles shopping cart operations
type CartServiceServer interface {
	// GetCart retrieves the current user's cart
	GetCart(context.Context, *GetCartRequest) (*Cart, error)
	// GetCartByID retrieves a cart by ID (mainly for guest-to-user conversion)
	GetCartByID(context.Context, *GetCartByIDRequest) (*Cart, error)
	// AddItem adds a product to the cart
	AddItem(context.Context, *AddItemRequest) (*Cart, error)
	// UpdateItem updates a cart item's quantity
	UpdateItem(context.Context, *UpdateItemRequest) (*Cart, error)
	// RemoveItem removes an item from the cart
	RemoveItem(context.Context, *RemoveItemRequest) (*Cart, error)
	// ClearCart removes all items from the cart
	ClearCart(context.Context, *ClearCartRequest) (*Cart, error)
	// ApplyCoupon applies a coupon code to the cart
	ApplyCoupon(context.Context, *ApplyCouponRequest) (*Cart, error)
	// RemoveCoupon removes a coupon from the cart
	RemoveCoupon(context.Context, *RemoveCouponRequest) (*Cart, error)
	// MergeCart merges a guest cart with a user's cart
	MergeCart(context.Context, *MergeCartRequest) (*Cart, error)
	// GetShippingOptions gets available shipping options for the cart
	GetShippingOptions(context.Context, *GetShippingOptionsRequest) (*GetShippingOptionsResponse, error)
	// SetShippingOption sets the selected shipping option for the cart
	SetShippingOption(context.Context, *SetShippingOptionRequest) (*Cart, error)
	// GetCartSummary gets a summary of the cart (for checkout)
	GetCartSummary(context.Context, *GetCartSummaryRequest) (*CartSummary, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartServiceServer struct{}

func (UnimplementedCartServiceServer) GetCart(context.Context, *GetCartRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartServiceServer) GetCartByID(context.Context, *GetCartByIDRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByID not implemented")
}
func (UnimplementedCartServiceServer) AddItem(context.Context, *AddItemRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCartServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedCartServiceServer) RemoveItem(context.Context, *RemoveItemRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedCartServiceServer) ClearCart(context.Context, *ClearCartRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedCartServiceServer) ApplyCoupon(context.Context, *ApplyCouponRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCoupon not implemented")
}
func (UnimplementedCartServiceServer) RemoveCoupon(context.Context, *RemoveCouponRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCoupon not implemented")
}
func (UnimplementedCartServiceServer) MergeCart(context.Context, *MergeCartRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeCart not implemented")
}
func (UnimplementedCartServiceServer) GetShippingOptions(context.Context, *GetShippingOptionsRequest) (*GetShippingOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingOptions not implemented")
}
func (UnimplementedCartServiceServer) SetShippingOption(context.Context, *SetShippingOptionRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShippingOption not implemented")
}
func (UnimplementedCartServiceServer) GetCartSummary(context.Context, *GetCartSummaryRequest) (*CartSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartSummary not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}
func (UnimplementedCartServiceServer) testEmbeddedByValue()                     {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCartByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartByID(ctx, req.(*GetCartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveItem(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ClearCart(ctx, req.(*ClearCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ApplyCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ApplyCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ApplyCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ApplyCoupon(ctx, req.(*ApplyCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveCoupon(ctx, req.(*RemoveCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_MergeCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).MergeCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_MergeCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).MergeCart(ctx, req.(*MergeCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetShippingOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetShippingOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetShippingOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetShippingOptions(ctx, req.(*GetShippingOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_SetShippingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetShippingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).SetShippingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_SetShippingOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).SetShippingOption(ctx, req.(*SetShippingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCartSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartSummary(ctx, req.(*GetCartSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCart",
			Handler:    _CartService_GetCart_Handler,
		},
		{
			MethodName: "GetCartByID",
			Handler:    _CartService_GetCartByID_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _CartService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _CartService_UpdateItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _CartService_RemoveItem_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _CartService_ClearCart_Handler,
		},
		{
			MethodName: "ApplyCoupon",
			Handler:    _CartService_ApplyCoupon_Handler,
		},
		{
			MethodName: "RemoveCoupon",
			Handler:    _CartService_RemoveCoupon_Handler,
		},
		{
			MethodName: "MergeCart",
			Handler:    _CartService_MergeCart_Handler,
		},
		{
			MethodName: "GetShippingOptions",
			Handler:    _CartService_GetShippingOptions_Handler,
		},
		{
			MethodName: "SetShippingOption",
			Handler:    _CartService_SetShippingOption_Handler,
		},
		{
			MethodName: "GetCartSummary",
			Handler:    _CartService_GetCartSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart/cart.proto",
}
