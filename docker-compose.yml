services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: podzone
      POSTGRES_PASSWORD: podzone123
      POSTGRES_DB: podzone
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U podzone']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: podzone
      MONGO_INITDB_ROOT_PASSWORD: podzone123
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin -u podzone -p podzone123 --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  # Microservices
  # catalog:
  #   build:
  #     context: .
  #     dockerfile: services/catalog/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=catalog
  #     - SERVICE_PORT=9001
  #     - ENV=development
  #   ports:
  #     - '9001:9001'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/catalog:/app/services/catalog
  #     - ./pkg:/app/pkg
  #
  # order:
  #   build:
  #     context: .
  #     dockerfile: services/order/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=order
  #     - SERVICE_PORT=9002
  #     - ENV=development
  #   ports:
  #     - '9002:9002'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/order:/app/services/order
  #     - ./pkg:/app/pkg
  #
  # user:
  #   build:
  #     context: .
  #     dockerfile: services/user/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=user
  #     - SERVICE_PORT=9003
  #     - ENV=development
  #   ports:
  #     - '9003:9003'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/user:/app/services/user
  #     - ./pkg:/app/pkg
  #
  # cart:
  #   build:
  #     context: .
  #     dockerfile: services/cart/Dockerfile
  #   environment:
  #     - MONGO_URI=mongodb://podzone:podzone123@mongodb:27017
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=cart
  #     - SERVICE_PORT=9004
  #     - ENV=development
  #   ports:
  #     - '9004:9004'
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/cart:/app/services/cart
  #     - ./pkg:/app/pkg
  #
  # payment:
  #   build:
  #     context: .
  #     dockerfile: services/payment/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=payment
  #     - SERVICE_PORT=9005
  #     - ENV=development
  #   ports:
  #     - '9005:9005'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/payment:/app/services/payment
  #     - ./pkg:/app/pkg

  # elasticsearch:
  #     container_name: 'elasticsearch'
  #     hostname: 'elasticsearch'
  #     image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
  #     ports:
  #         - '9200:9200'
  #         - '9300:9300'
  #     volumes:
  #         - ./data-mount/elasticsearch/data:/usr/share/elasticsearch/data
  #     environment: # [..] Read more: Cluster mode https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
  #         - 'discovery.type=single-node'
  #         - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
  #         # - XPACK_MONITORING_ENABLED=true # [..] Read more: https://www.elastic.co/guide/en/elasticsearch/reference/7.7/elasticsearch-security.html
  #         # - ELASTICSEARCH_USERNAME=elastic
  #         # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #
  # kibana:
  #     container_name: 'kibana'
  #     hostname: 'kibana'
  #     image: docker.elastic.co/kibana/kibana:7.7.0
  #     ports:
  #         - '5601:5601'
  #     environment: # [..] Read more: https://www.elastic.co/guide/en/kibana/current/settings.html
  #         - SERVER_HOST=0.0.0.0
  #         - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # zookeeper:
  #     image: confluentinc/cp-zookeeper:7.2.1
  #     hostname: zookeeper
  #     container_name: zookeeper
  #     ports:
  #         - '2181:2181'
  #     environment:
  #         ZOOKEEPER_CLIENT_PORT: 2181
  #         ZOOKEEPER_TICK_TIME: 2000
  #
  # kafka:
  #     image: confluentinc/cp-server:7.2.1
  #     hostname: kafka
  #     container_name: kafka
  #     depends_on:
  #         - zookeeper
  #     ports:
  #         - '9092:9092'
  #         - '9997:9997'
  #     environment:
  #         KAFKA_BROKER_ID: 1
  #         KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #         KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #         KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #         KAFKA_JMX_PORT: 9997
  #         KAFKA_JMX_HOSTNAME: kafka

  # API Gateway
  kong:
    build:
      context: services/gateway
      dockerfile: Dockerfile
    depends_on:
      - kong-database
      - kong-migration
    environment:
      # Original microservice connection settings
      - CATALOG_SERVICE_HOST=catalog
      - CATALOG_SERVICE_PORT=9001
      - ORDER_SERVICE_HOST=order
      - ORDER_SERVICE_PORT=9002
      - USER_SERVICE_HOST=user
      - USER_SERVICE_PORT=9003
      - CART_SERVICE_HOST=cart
      - CART_SERVICE_PORT=9004
      - PAYMENT_SERVICE_HOST=payment
      - PAYMENT_SERVICE_PORT=9005
      - SERVICE_NAME=gateway
      - SERVICE_PORT=8000
      - ENV=development

      # Kong-specific settings
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong_password
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl
    volumes:
      - ./api/proto:/usr/local/kong/protos
      # - ./services/gateway:/app/services/gateway
      # - ./pkg:/app/pkg
      # - ./services/gateway/plugins:/usr/local/kong/plugins
    ports:
      - '8000:8000' # HTTP proxy
      - '8443:8443' # HTTPS proxy
      - '8001:8001' # Admin API
      - '9080:9080' # gRPC proxy
      - '9081:9081' # gRPC+TLS proxy
    restart: unless-stopped

  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_password
    volumes:
      - kong_data:/var/lib/postgresql/data
    # ports:
    #   - '5432:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'kong']
      interval: 5s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:3.9.0
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
    command: kong migrations bootstrap
    restart: on-failure

  # # Admin UI for Kong
  # konga:
  #   image: pantsel/konga:latest
  #   depends_on:
  #     - kong
  #   environment:
  #     NODE_ENV: production
  #     DB_ADAPTER: postgres
  #     DB_HOST: kong-database
  #     DB_USER: kong
  #     DB_PASSWORD: kong_password
  #     DB_DATABASE: konga
  #   ports:
  #     - '1337:1337'
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  kong_data:
