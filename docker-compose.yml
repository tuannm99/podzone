services:
  postgres:
    container_name: pg_db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # POSTGRES_DB: podzone
    ports:
      - '5432:5432'
    volumes:
      - /mnt/docker/postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db:/docker-entrypoint-initdb.d
    restart: always

  redis:
    image: redis:7
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - /mnt/docker/redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  mongodb:
    container_name: mongo
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: podzone
      MONGO_INITDB_ROOT_PASSWORD: podzone123
    ports:
      - '27017:27017'
    volumes:
      - /mnt/docker/mongo_data:/data/db
    restart: always

  elasticsearch:
    container_name: 'elasticsearch'
    hostname: 'elasticsearch'
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - /mnt/docker/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - 'discovery.type=single-node'
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      # - XPACK_MONITORING_ENABLED=true
      # - ELASTICSEARCH_USERNAME=elastic
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    restart: always

  # kibana:
  #     container_name: 'kibana'
  #     hostname: 'kibana'
  #     image: docker.elastic.co/kibana/kibana:7.7.0
  #     ports:
  #         - '5601:5601'
  #     environment:
  #         - SERVER_HOST=0.0.0.0
  #         - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # zookeeper:
  #     image: confluentinc/cp-zookeeper:7.2.1
  #     hostname: zookeeper
  #     container_name: zookeeper
  #     ports:
  #         - '2181:2181'
  #     environment:
  #         ZOOKEEPER_CLIENT_PORT: 2181
  #         ZOOKEEPER_TICK_TIME: 2000
  #
  # kafka:
  #     image: confluentinc/cp-server:7.2.1
  #     hostname: kafka
  #     container_name: kafka
  #     depends_on:
  #         - zookeeper
  #     ports:
  #         - '9092:9092'
  #         - '9997:9997'
  #     environment:
  #         KAFKA_BROKER_ID: 1
  #         KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #         KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #         KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #         KAFKA_JMX_PORT: 9997
  #         KAFKA_JMX_HOSTNAME: kafka

  etcd:
    image: bitnami/etcd:3.5.21
    container_name: 'etcd'
    user: '0'
    restart: always
    volumes:
      - /mnt/docker/etcd-apisix:/bitnami/etcd
    command: sh -c "mkdir -p /bitnami/etcd/data && chmod 777 /bitnami/etcd/data && etcd"
    environment:
      - ETCD_ENABLE_V2=true
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      - '2379:2379'
    healthcheck:
      test: ['CMD', 'etcdctl', 'endpoint', 'health']
      interval: 5s
      timeout: 5s
      retries: 5

  # API Gateway
  apisix:
    image: apache/apisix:3.12.0-debian
    container_name: 'apisix-gateway'
    volumes:
      - ./internal/gateway/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ports:
      - '9080:9080'
      - '9443:9443'
      - '9180:9180'
    restart: always

  apisix-dashboard:
    image: apache/apisix-dashboard:latest
    container_name: 'apisix-dashboard'
    volumes:
      - ./internal/gateway/dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
      - '9000:9000'
    restart: always

  grpc-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: grpcgateway
    container_name: grpcgateway-service
    environment:
      APP_ENV: dev
      DEFAULT_LOG_LEVEL: debug
      GW_HTTP_PORT: 8080
      AUTH_GRPC_ADDR: 'auth-service:50051'
      ORDER_GRPC_ADDR: 'order-service:50051'
      CATALOG_GRPC_ADDR: 'catalog-service:50051'
      PAYMENT_GRPC_ADDR: 'payment-service:50051'
      CART_GRPC_ADDR: 'cart-service:50051'
    ports:
      - '8080:8080'
    restart: always

  # Microservices
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: auth
    container_name: auth-service
    environment:
      GOOGLE_CLIENT_ID: '${GOOGLE_CLIENT_ID}'
      GOOGLE_CLIENT_SECRET: '${GOOGLE_CLIENT_SECRET}'
      OAUTH_REDIRECT_URL: '${OAUTH_REDIRECT_URL}'
      JWT_SECRET: '${JWT_SECRET}'
      APP_REDIRECT_URL: '${APP_REDIRECT_URL}'
      GRPC_PORT: '50051'
      GW_HTTP_PORT: '8080'
    ports:
      - '50051:50051'
    restart: always

  # catalog:
  #   build:
  #     context: .
  #     dockerfile: services/catalog/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=catalog
  #     - SERVICE_PORT=9001
  #     - ENV=development
  #   ports:
  #     - '9001:9001'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/catalog:/app/services/catalog
  #     - ./pkg:/app/pkg
  #
  # order:
  #   build:
  #     context: .
  #     dockerfile: services/order/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=order
  #     - SERVICE_PORT=9002
  #     - ENV=development
  #   ports:
  #     - '9002:9002'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/order:/app/services/order
  #     - ./pkg:/app/pkg
  #
  # user:
  #   build:
  #     context: .
  #     dockerfile: services/user/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=user
  #     - SERVICE_PORT=9003
  #     - ENV=development
  #   ports:
  #     - '9003:9003'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/user:/app/services/user
  #     - ./pkg:/app/pkg
  #
  # cart:
  #   build:
  #     context: .
  #     dockerfile: services/cart/Dockerfile
  #   environment:
  #     - MONGO_URI=mongodb://podzone:podzone123@mongodb:27017
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=cart
  #     - SERVICE_PORT=9004
  #     - ENV=development
  #   ports:
  #     - '9004:9004'
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/cart:/app/services/cart
  #     - ./pkg:/app/pkg
  #
  # payment:
  #   build:
  #     context: .
  #     dockerfile: services/payment/Dockerfile
  #   environment:
  #     - DB_HOST=postgres
  #     - REDIS_HOST=redis
  #     - SERVICE_NAME=payment
  #     - SERVICE_PORT=9005
  #     - ENV=development
  #   ports:
  #     - '9005:9005'
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./services/payment:/app/services/payment
  #     - ./pkg:/app/pkg
